Задание 1: Тестирование метода сложения
Описание:
Написать параметризованный тест для метода add(int a, int b), который принимает два целых числа и возвращает их сумму.

Что нужно сделать:

Создать класс с методом add(int a, int b).
Написать параметризованный тест в JUnit 5.
Использовать аннотацию @ParameterizedTest и @CsvSource.
Проверить корректность вычислений на различных входных данных.
Задание 2: Проверка чётности числа
Описание:
Написать параметризованный тест для метода isEven(int number), который проверяет, является ли число четным.

Что нужно сделать:

Создать класс с методом isEven(int number), который возвращает true, если число четное, и false в противном случае.
Написать параметризованный тест в JUnit 5.
Использовать аннотацию @ParameterizedTest и @ValueSource.
Проверить, что метод корректно определяет четные числа.
Задание 3: Проверка корректности работы деления
Описание:
Написать параметризованный тест для метода divide(int a, int b), который выполняет деление двух чисел и возвращает результат.

Что нужно сделать:

Создать класс с методом divide(int a, int b), который возвращает результат деления a / b.
Написать параметризованный тест в JUnit 5.
Использовать @CsvSource для проверки различных наборов входных данных.
Проверить корректность вычислений и обработку деления на ноль.
Задание 4: Проверка длины строки
Описание:
Написать параметризованный тест для метода getLength(String str), который принимает строку и возвращает её длину.

Что нужно сделать:

Создать класс с методом getLength(String str).
Написать параметризованный тест в JUnit 5.
Использовать @CsvSource для передачи строк разной длины.
Проверить корректность вычисления длины строки, включая пустую строку и null.
Задание 5: Проверка, содержит ли строка определенное слово
Описание:
Написать параметризованный тест для метода containsWord(String text, String word), который проверяет, содержит ли строка заданное слово.

Что нужно сделать:

Создать класс с методом containsWord(String text, String word), который возвращает true, если text содержит word.
Написать параметризованный тест в JUnit 5.
Использовать @CsvSource для передачи различных комбинаций text и word.
Проверить, что метод корректно определяет наличие слова в строке.